package com.example.MyBookShopApp.data.book;

import com.example.MyBookShopApp.data.author.Author;
import com.example.MyBookShopApp.data.book.file.BookFile;
import com.example.MyBookShopApp.data.book.file.FileDownloadEntity;
import com.example.MyBookShopApp.data.book.review.BookReview;
import com.example.MyBookShopApp.data.genre.Genre;
import com.example.MyBookShopApp.data.payments.BalanceTransaction;
import com.example.MyBookShopApp.data.tag.TagEntity;
import com.example.MyBookShopApp.data.user.User;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import org.hibernate.annotations.Formula;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Entity
@Table(name = "book")
@ApiModel(description = "entity representing a book")
@Data
@JsonIgnoreProperties({"author", "users", "genre", "tags", "fileDownload", "balanceTransaction", "bookReview"})
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private Integer id;

    @Column(columnDefinition = "TEXT NOT NULL")
    @ApiModelProperty("book description text")
    private String description;

    @Column(columnDefinition = "SMALLINT NOT NULL")
    @ApiModelProperty("book price without discount")
    private short discount;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("image url")
    private String image;

    @Column(name = "is_bestseller", columnDefinition = "SMALLINT NOT NULL")
    @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and  if 0 the book is not a " +
            "bestseller")
    private short isBestseller;

    @Column(columnDefinition = "INT NOT NULL")
    @ApiModelProperty("book price without discount")
    private int price;

    @Column(name = "pub_date", columnDefinition = "DATE NOT NULL")
    @Temporal(TemporalType.DATE)
    @ApiModelProperty("date of book publication")
    private Date pubDate;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("mnemonical identity sequence of characters")
    private String slug;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("book title")
    private String title;

    @Column(name = "stat_in_cart", columnDefinition = "INT NOT NULL")
    private Integer statInCart;

    @Column(name = "stat_bought", columnDefinition = "INT NOT NULL")
    private Integer statBought;

    @Column(name = "stat_postponed", columnDefinition = "INT NOT NULL")
    private Integer statPostponed;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "book2author",
            joinColumns = {@JoinColumn(name = "bookId")},
            inverseJoinColumns = {@JoinColumn(name = "authorId")})
    private List<Author> author;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "book2genre",
            joinColumns = {@JoinColumn(name = "bookId")},
            inverseJoinColumns = {@JoinColumn(name = "genreId")})
    private List<Genre> genre;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "book2user",
            joinColumns = {@JoinColumn(name = "bookId")},
            inverseJoinColumns = {@JoinColumn(name = "userId")})
    private List<User> users;

    @OneToMany(mappedBy = "book")
    private List<BookFile> bookFileList = new ArrayList<>();

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "book2tag",
            joinColumns = @JoinColumn(name = "bookId"),
            inverseJoinColumns = @JoinColumn(name = "tagId"))
    private List<TagEntity> tags;

     @OneToMany(fetch = FetchType.LAZY)
     @JoinColumn(name = "bookId")
     private List<FileDownloadEntity> fileDownload;

    @OneToMany(mappedBy = "book", orphanRemoval = true,fetch = FetchType.LAZY)
    private List<BalanceTransaction> balanceTransaction;

     @OneToMany(fetch = FetchType.LAZY)
     @JoinColumn(name = "bookId")
     private List<BookReview> bookReview;

    @Formula("(SELECT avg(br.value) from book_rating br where br.book_id = id)")
    private Float raiting;

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", author=" + author +
                ", title='" + title + '\'' +
                ", price=" + price +
                '}';
    }

    public String toStringAuthors(){
        return author.stream().map(Author::getName).collect(Collectors.joining(", "));
    }

    public String toStringGenres(){
        return genre.stream().map(Genre::getName).collect(Collectors.joining(", "));
    }
}
